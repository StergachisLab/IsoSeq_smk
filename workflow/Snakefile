import os
import yaml
import glob

# Load config file
configfile: os.environ.get("SNAKEMAKE_CONFIG", "config/test_config.yaml")

# List of all individuals from the configuration file
individuals = config["individuals"].keys()

# Get existing conditions per individual (skip missing ones)
conditions_per_individual = {
    ind: [cond for cond in ["treated", "untreated"] if cond in config["individuals"][ind]]
    for ind in individuals
}

# Dictionary containing labels for each individual and condition
labels = {
    ind: {
        cond: list(config["individuals"][ind][cond].keys())
        for cond in conditions_per_individual[ind]
    }
    for ind in individuals
}

# Define valid combinations of individual, condition, and label
combinations = [
    {"individual": ind, "condition": cond, "label": lbl}
    for ind in individuals
    for cond in conditions_per_individual[ind]
    for lbl in labels[ind][cond]
]

# Debug: show combinations being processed
print("Valid combinations to be processed:")
for comb in combinations:
    print(f"{comb['individual']} - {comb['condition']} - {comb['label']}")

# Restrict the values wildcards can take
wildcard_constraints:
    individual="|".join(individuals),
    condition="|".join(
        sorted(set(cond for conds in conditions_per_individual.values() for cond in conds))
    ),
    label="|".join(
        sorted(set(lbl for ind in individuals for cond in conditions_per_individual[ind] for lbl in labels[ind][cond]))
    )

include: "rules/common.smk"

rule all:
    input:
        expand(
            "tag/{individual}_{condition}_{label}.tagged.bam",
            zip,
            individual=[comb["individual"] for comb in combinations],
            condition=[comb["condition"] for comb in combinations],
            label=[comb["label"] for comb in combinations],
        ),
        "tag/dictionary.tsv.gz",
        "collapse/collapsed.gff",
        "pigeon/sorted.gff",
        "pigeon/pigeon_classification.txt",
        expand(
            "qc/{individual}_{condition}_{label}_qc_summary.tsv",
            zip,
            individual=[comb["individual"] for comb in combinations],
            condition=[comb["condition"] for comb in combinations],
            label=[comb["label"] for comb in combinations],
        ),
        expand(
            "qc/{individual}_{condition}_{label}_plots",
            zip,
            individual=[comb["individual"] for comb in combinations],
            condition=[comb["condition"] for comb in combinations],
            label=[comb["label"] for comb in combinations],
        ),
        "Output/browser/combined_results/merged_ranked_gene_with_phenotype.tsv.gz",
        "Output/browser/combined_results/merged_ranked_isoform_with_phenotype.tsv.gz",
        "Output/browser/lookup_tables/gene_coverage_lookup_table.tsv.gz",
        "Output/browser/lookup_tables/sample_gene_rankings_lookup_table.tsv.gz",
        "Output/intermediate/merged_ranked_gene.tsv.gz",
        "Output/intermediate/merged_ranked_isoform.tsv.gz",
        "Output/qc/gene_diversity.tsv.gz",
        "Output/qc/isoform_diversity.tsv.gz",
        "Output/qc/pca_plot.pdf",
